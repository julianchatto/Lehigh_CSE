-- Byte Code format

-- test-file = test* | coment* ;
-- 
-- test = insert-node | insert-head | insert-tail | remove-node
--          | remove-head | remove-tail | assert-node | assert-head
--          | assert-tail | assert-size | end-of-test | assert-contains;
-- 
-- insert-node = "N", index, ",", value ;
-- insert-head = "H", value ;
-- insert-tail = "T", value ;
-- 
-- remove-node = "E", index ;
-- remove-head = "D", ;
-- remove-tail = "C", ;
-- 
-- assert-node = "Q", index, ",",  value ;
-- assert-head = "A", value ;
-- assert-tail = "Z", value;
-- assert-size = "S", size ;
-- assert-contains = "W", value ;
-- 
-- end-of-test = "X";
-- 
-- index = digit+;
-- value = "-"? digit+;
-- size = digit+;
-- digit = "0" | "1" | ... | "9";
-- comment = "--", ?anycharacter?;

-- For example:

-- Test 1 - Add a node to an empty linked list
-- Inserts a node with a value of 5 as the head and verifies that the head, tail, and size of the linked list are all correct.
H5A5Z5S1X

-- This bytecode string should be interpreted as follows:

-- H 5     -- insert 5 as the head node
-- A 5     -- assert that the head node has a value of 5
-- Z 5     -- assert that the tail node has a value of 5
-- S 1     -- assert that the size of the linked list is 1
-- X       -- end of test

-- In this test, the H operation is used to insert a new node with a value of 5 as the head of the linked list. The A operation is then used to assert that the head node has a value of 5, and the Z operation is used to assert that the tail node also has a value of 5 (since there is only one node in the list). Finally, the S operation is used to assert that the size of the linked list is 1. The test ends with the X operation.

-- BEGIN TESTS ------------------------------------------------------

-- Test 2 - Add a node to the head of a non-empty linked list
-- Inserts a node with a value of 5 as the head, then inserts a node with a value of 10 as the new head and verifies that the head, tail, and size of the linked list are all correct.
H5A5Z5S1N0,10A10Z5S2X

-- Test 3 - Add a node to the tail of a non-empty linked list
-- Inserts a node with a value of 10 as the tail and verifies that the head, tail, and size of the linked list are all correct.
H5T10A5Q0,5A5Z10S2X

-- Test 4 - Removes the tail node from a linked list with multiple nodes:
-- Inserts three nodes with values of 5, 10, and 15 as the head, removes the head node with a value of 15, and verifies that the head, tail, and size of the linked list are all correct.
H5H10H15DA10T5S3X

-- Test 5 - Removes the tail node from a linked list with multiple nodes:
-- Inserts three nodes with values of 5, 10, and 15 as the head, removes the tail node with a value of 5, and verifies that the head, tail, and size of the linked list are all correct.
H5H10H15CA15T10S3X

-- Test 6 - Removes a node from the middle of a linked list with multiple nodes:
-- Inserts three nodes with values of 5, 10, and 15 as the head, removes the node with a value of 10, and verifies that the head, tail, and size of the linked list are all correct.
H5H10H15E1A15Z5S2X

-- Test 7 - getting the value of the head node in a linked list:
-- Inserts two nodes with values of 5 and 10 as the head, gets the value of the head node, and verifies that the head, tail, and size of the linked list are all correct.
H5H10A10S2X

-- Test 8 - Getting the value of the tail node in a linked list:
-- Inserts two nodes with values of 5 and 10 as the head, gets the value of the tail node, and verifies that the head, tail, and size of the linked list are all correct.
H5H10Z5A10S2X

-- Test 9 - Check if a node with a given value exists in a linked list:
-- Inserts three nodes with values of 5, 10, and 15 as the head, checks if a node with a value of 10 exists, and verifies the head, tail, and size of the linked list are all correct.
H5H10H15W10S3X

-- Test 10 - Remove the last node in a linked list:
-- Inserts a node with a value of 5 as the head and removes it, verifying that the head, tail, and size of the linked list are all correct. This edge case tests what happens when the linked list becomes empty after removing the last node.
H5H10CZ10S1X

-- Test 11 - Checking that a node is at a specific index
-- Inserts a node with a value 5 as the head,a value 10 as the tail,a value 15 as the head, a value 23 as the tail. Asserts the size is 4, asserts node at index 2 is 10, asserts that the tail is 23.
H5T10H15T23S4Q2,10W23X

-- Test 12 - Removing all nodes and then adding one back
-- inserts nodes a head with value 5 and 10, removes tail and node at index 0. Asserts size is 0, adds element at index 0
H5H10CE0S0N0,3X

-- Test 13 - Assert initial size is 0, and size later
-- Asserts size is 0, adds node at head with value 5 asserts size is 1, adds nodes at head with values 10, 15. Asserts size is 3
S0H5S1H10H15S3X

-- Test 14 - Adding elements only with insert-node
-- Inserts node at index 0 with value 5, Inserts node at index 0 with value 4, Inserts node at index 1 with value 3. Asserts the size is 3
N0,5N0,4N1,3S3X

-- Test 15 - Adding a tail initially, removing via tail with list size = 1
-- Insert tail with value 5, remove tail, insert tail with value 4, remove head, insert head with value 3, remove tail
T5CT4DH3CX